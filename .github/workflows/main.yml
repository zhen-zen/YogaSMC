# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Download MacKernelSDK
      run: git clone --depth 1 https://github.com/acidanthera/MacKernelSDK.git
    - name: Download Lilu / VirtualSMC SDK (script from hieplpvip/AsusSMC (Acidanthera/Lilu))
      run: src=$(/usr/bin/curl -Lfs https://raw.githubusercontent.com/hieplpvip/AsusSMC/master/Scripts/bootstrap.sh) && eval "$src" || exit 1
    - name: Xcodebuild Debug
      uses: sersoft-gmbh/xcodebuild-action@v1.1
      with:
        project: YogaSMC.xcodeproj
        # The scheme to build. Required when using a workspace.
        #scheme: # optional
        # The destination specifier to build.
        # destination: # optional
        configuration: Debug
        # Arbitrary, space separated build settings (e.g. PLATFORM_NAME=iphonesimulator).
        build-settings: -target BuildAll
        # The action to perform (e.g. build, test, ...).
        action: build # default is test
    - name: Xcodebuild Release
      uses: sersoft-gmbh/xcodebuild-action@v1.1
      with:
        project: YogaSMC.xcodeproj
        # The destination specifier to build.
        # destination: # optional
        # The configuration to build.
        configuration: Release
        # Arbitrary, space separated build settings (e.g. PLATFORM_NAME=iphonesimulator).
        build-settings: -target BuildAll
        # The action to perform (e.g. build, test, ...).
        action: build # default is test
    - run: mkdir build/Release-App; mv build/Release/YogaSMCNC.app build/Release-App/; mv build/Release/YogaSMCPane.prefPane build/Release-App/; cp LICENSE build/Release-App/; ln -s /Applications build/Release-App/; cp -r YogaSMC/SSDTSample build/Release/
    - run: mkdir build/Debug-App; mv build/Debug/YogaSMCNC.app build/Debug-App/; mv build/Debug/YogaSMCPane.prefPane build/Debug-App/; cp LICENSE build/Debug-App/;  ln -s /Applications build/Debug-App/; cp -r YogaSMC/SSDTSample build/Debug/
    - name: Create DMG image
      run: brew install create-dmg && create-dmg --window-size 450 450 build/YogaSMC-App-Debug.dmg build/Debug-App/ && create-dmg --window-size 450 450 build/YogaSMC-App-Release.dmg build/Release-App/
    - uses: actions/upload-artifact@v2
      with:
        name: YogaSMC-Debug
        path: |
          build/Debug/*.kext/
          build/Debug/LICENSE
          build/Debug/SSDTSample/
    - uses: actions/upload-artifact@v2
      with:
        name: YogaSMC-App-Debug
        path: build/YogaSMC-App-Debug.dmg
    - uses: actions/upload-artifact@v2
      with:
        name: YogaSMC-Release
        path: |
          build/Release/*.kext/
          build/Release/LICENSE
          build/Release/SSDTSample/
    - uses: actions/upload-artifact@v2
      with:
        name: YogaSMC-App-Release
        path: build/YogaSMC-App-Release.dmg
    - uses: actions/upload-artifact@v2
      with:
        name: YogaSMC-Release-dSYM
        path: |
          build/Release/*.dSYM/
          build/Release/LICENSE
